name: AI-Powered Feature Suggestion Generator

on:
  schedule:
    # Run 3 times per day (at midnight, 8 AM, and 4 PM UTC)
    - cron: '0 0,8,16 * * *'
  pull_request:
    types: [closed]
  workflow_dispatch: # Allow manual triggering

# Set permissions for the workflow
permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  generate-improvement-suggestions:
    runs-on: ubuntu-latest
    # Only run on schedule, manual trigger, or when a PR is merged
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install axios

      - name: Generate AI-powered feature suggestions
        id: generate-suggestions
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node .github/scripts/generate-suggestions.js

      - name: Create advanced feature suggestion issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              // Check if we should skip issue creation due to duplicates
              const skipFile = '.github/skip-issue-creation.txt';
              if (fs.existsSync(skipFile)) {
                console.log('⏭️ Skipping issue creation - similar issues already exist');
                fs.unlinkSync(skipFile); // Clean up the flag file
                return;
              }
              
              const suggestions = fs.readFileSync('.github/suggestions.txt', 'utf8');
              
              if (suggestions.trim()) {
                // Extract feature name from suggestions for a more descriptive title
                function extractFeatureName(suggestions) {
                  // Look for the pattern: ## 🎯 [Feature Name]
                  const featureMatch = suggestions.match(/##\s*🎯\s*(.+)/);
                  if (featureMatch) {
                    return featureMatch[1].trim();
                  }
                  
                  // Fallback: look for any ## header after the main title
                  const headerMatch = suggestions.match(/^# .+\n\n##\s*(.+)/m);
                  if (headerMatch) {
                    return headerMatch[1].replace(/[🎯🚀💡⚡🔧🎨📱🌟]/g, '').trim();
                  }
                  
                  // Another fallback: look for the first significant heading
                  const anyHeaderMatch = suggestions.match(/^##\s*(.+)/m);
                  if (anyHeaderMatch) {
                    return anyHeaderMatch[1].replace(/[🎯🚀💡⚡🔧🎨📱🌟]/g, '').trim();
                  }
                  
                  return null;
                }
                
                const featureName = extractFeatureName(suggestions);
                const issueTitle = featureName 
                  ? `🚀 ${featureName}` 
                  : `🚀 AI Feature Suggestion - ${new Date().toISOString().split('T')[0]}`;
                
                // Create the issue with enhanced labeling
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: '<!-- This issue was generated by our AI feature suggestion system -->\n\n' + suggestions + '\n\n---\n\n**About this issue:**\nThis issue was generated by our AI system that analyzes the current AI Code Review Tool codebase and suggests a single, focused feature improvement. The suggestion focuses on:\n\n- 🤖 Real AI integration with modern APIs\n- 🎯 Advanced code analysis capabilities  \n- 🚀 Professional-grade developer features\n- 💡 Innovative capabilities that set this tool apart\n- 🔧 Technical implementation guidance\n\nThis is a discrete, actionable improvement that can be implemented independently.',
                  labels: ['ai-suggestion', 'enhancement', 'feature-request', 'discrete-improvement']
                });
                
                console.log(`✅ Created AI feature suggestion issue #${issue.data.number}`);
                
                // Try to assign relevant maintainers
                try {
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.data.number,
                    assignees: ['Copilot']
                  });
                  
                  console.log('✅ Assigned GitHub Copilot to the issue');
                } catch (assignError) {
                  console.log('⚠️ Could not assign GitHub Copilot (this is normal if Copilot is not available)');
                }
                
              } else {
                console.log('❌ No suggestion generated');
              }
            } catch (error) {
              console.error('Error creating issue:', error);
            }
